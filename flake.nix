# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.17)
{
  # A helpful description of your flake
  description = "Flake for Baton connector for Red Hat速 OpenShift速";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*";
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              go
              golangci-lint
              golangci-lint-langserver
              gopls
              jq
              nixpkgs-fmt
              openshift # provides the `oc` command

              # install the binary of this project
              self.packages.${pkgs.system}.baton-openshift
            ];
          };
        }
      );

      packages = forEachSupportedSystem (
        { pkgs }:
        {
          baton-openshift = pkgs.buildGoModule {
            pname = "baton-openshift";
            version = "0.1.0";

            src = ./.;

            modSha256 = null;
            vendorHash = null;

            meta = with pkgs.lib; {
              description = "Baton connector for Red Hat速 OpenShift速";
              license = licenses.asl20;
            };
          };
        }
      );

      defaultPackage = forEachSupportedSystem (
        { pkgs, ... }: self.packages.${pkgs.system}.baton-openshift
      );
    };
}
